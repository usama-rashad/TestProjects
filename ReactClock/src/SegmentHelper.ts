export class SegmentHelper {
  bitMap8: Array<boolean>;
  constructor(pixelHeight: number) {
    this.bitMap8 = Array<boolean>();
    for (let i = 0; i < pixelHeight; i++) {
      this.bitMap8.push(false);
    }
  }
  convert(input: number): Array<boolean> {
    let stringResult = input.toString(2).padStart(8, "0");
    return Array.from(stringResult.split("").map((value) => value == "1"));
  }

  convertBCD(input: number): Array<boolean[]> {
    let stringMap: string[][] = [];
    switch (input) {
      case 0:
        stringMap = [
          ["0", "1", "1", "1", "0"],
          ["1", "0", "0", "0", "1"],
          ["1", "0", "0", "1", "1"],
          ["1", "0", "1", "0", "1"],
          ["1", "1", "0", "0", "1"],
          ["1", "0", "0", "0", "1"],
          ["0", "1", "1", "1", "0"],
          ["0", "0", "0", "0", "0"],
        ];
        break;
      case 1:
        stringMap = [
          ["0", "0", "1", "0", "0"],
          ["0", "1", "1", "0", "0"],
          ["0", "0", "1", "0", "0"],
          ["0", "0", "1", "0", "0"],
          ["0", "0", "1", "0", "0"],
          ["0", "0", "1", "0", "0"],
          ["0", "1", "1", "1", "0"],
          ["0", "0", "0", "0", "0"],
        ];
        break;
      case 2:
        stringMap = [
          ["0", "1", "1", "1", "0"],
          ["1", "0", "0", "0", "1"],
          ["0", "0", "0", "0", "1"],
          ["0", "0", "0", "1", "0"],
          ["0", "0", "1", "0", "0"],
          ["0", "1", "0", "0", "0"],
          ["1", "1", "1", "1", "1"],
          ["0", "0", "0", "0", "0"],
        ];
        break;
      case 3:
        stringMap = [
          ["1", "1", "1", "1", "1"],
          ["0", "0", "0", "1", "0"],
          ["0", "0", "1", "0", "0"],
          ["0", "0", "0", "1", "0"],
          ["0", "0", "0", "0", "1"],
          ["1", "0", "0", "0", "1"],
          ["0", "1", "1", "1", "0"],
          ["0", "0", "0", "0", "0"],
        ];
        break;
      case 4:
        stringMap = [
          ["0", "0", "0", "1", "0"],
          ["0", "0", "1", "1", "0"],
          ["0", "1", "0", "1", "0"],
          ["1", "0", "0", "1", "0"],
          ["1", "1", "1", "1", "1"],
          ["0", "0", "0", "1", "0"],
          ["0", "0", "0", "1", "0"],
          ["0", "0", "0", "0", "0"],
        ];
        break;
      case 5:
        stringMap = [
          ["1", "1", "1", "1", "1"],
          ["1", "0", "0", "0", "0"],
          ["1", "1", "1", "1", "0"],
          ["0", "0", "0", "0", "1"],
          ["0", "0", "0", "0", "1"],
          ["0", "0", "0", "0", "1"],
          ["1", "1", "1", "1", "0"],
          ["0", "0", "0", "0", "0"],
        ];
        break;
      case 6:
        stringMap = [
          ["0", "0", "1", "1", "0"],
          ["0", "1", "0", "0", "0"],
          ["1", "0", "0", "0", "0"],
          ["1", "1", "1", "1", "0"],
          ["1", "0", "0", "0", "1"],
          ["1", "0", "0", "0", "1"],
          ["0", "1", "1", "1", "0"],
          ["0", "0", "0", "0", "0"],
        ];
        break;
      case 7:
        stringMap = [
          ["1", "1", "1", "1", "1"],
          ["0", "0", "0", "0", "1"],
          ["0", "0", "0", "1", "0"],
          ["0", "0", "1", "0", "0"],
          ["0", "1", "0", "0", "0"],
          ["0", "1", "0", "0", "0"],
          ["0", "1", "0", "0", "0"],
          ["0", "0", "0", "0", "0"],
        ];
        break;
      case 8:
        stringMap = [
          ["0", "1", "1", "1", "0"],
          ["1", "0", "0", "0", "1"],
          ["1", "0", "0", "0", "1"],
          ["0", "1", "1", "1", "0"],
          ["1", "0", "0", "0", "1"],
          ["1", "0", "0", "0", "1"],
          ["0", "1", "1", "1", "0"],
          ["0", "0", "0", "0", "0"],
        ];
        break;
      case 9:
        stringMap = [
          ["0", "1", "1", "1", "0"],
          ["1", "0", "0", "0", "1"],
          ["1", "0", "0", "0", "1"],
          ["0", "1", "1", "1", "1"],
          ["0", "0", "0", "0", "1"],
          ["0", "0", "0", "1", "0"],
          ["0", "1", "1", "0", "0"],
          ["0", "0", "0", "0", "0"],
        ];
        break;
    }
    let binaryMap = stringMap.map((rows) => {
      return rows.map((column) => {
        return column === "1" ? true : false;
      });
    });
    return binaryMap;
  }
}
